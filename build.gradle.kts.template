plugins {
    id("org.springframework.boot") version "2.3.3.RELEASE"
    id("io.spring.dependency-management") version "1.0.10.RELEASE"
    java
}

group = "ru.pm"
version = "1.0.0"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

if (project.hasProperty("sigma")) {
    repositories {
        maven("http://nexus.sigma.sbrf.ru:8099/nexus/content/groups/public")
        mavenCentral()
    }
} else {
    repositories {
        mavenCentral()
    }
}

configurations.all {
    exclude(mapOf("group" to "org.springframework.boot", "module" to "spring-boot-starter-logging"))
    exclude(mapOf("group" to "ch.qos.logback", "module" to "logback-classic"))
    exclude(mapOf("group" to "ch.qos.logback", "module" to "logback-core"))
    exclude(mapOf("group" to "org.slf4j", "module" to "slf4j-nop"))
    exclude(mapOf("group" to "org.slf4j", "module" to "slf4j-log4j12"))
    exclude(mapOf("group" to "org.slf4j", "module" to "log4j-slf4j-impl"))
    exclude(mapOf("group" to "org.eclipse.jetty", "module" to "*"))
    exclude(mapOf("group" to "org.springframework.boot", "module" to "spring-boot-starter-tomcat"))
    exclude(mapOf("group" to "junit", "module" to "junit"))
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-actuator")

    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.hibernate:hibernate-jcache")
    runtimeOnly("org.ehcache:ehcache")
    implementation("org.liquibase:liquibase-core")
    runtimeOnly("com.h2database:h2")
    implementation("org.postgresql:postgresql")
    implementation("org.apache.hive:hive-jdbc:3.1.2")

    implementation("org.springframework.boot:spring-boot-starter-undertow")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("org.springframework.boot:spring-boot-starter-web")

    implementation("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.projectlombok:lombok")
    implementation("org.apache.commons:commons-lang3:3.11")

    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.webjars:webjars-locator-core")
    implementation("org.webjars:sockjs-client:1.0.2")
    implementation("org.webjars:stomp-websocket:2.3.3")
    implementation("org.webjars:bootstrap:3.3.7")
    implementation("org.webjars:jquery:3.1.1-1")

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(module = "junit-vintage-engine")
        exclude(module = "android-json")
    }
    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("io.github.glytching:junit-extensions:2.4.0")
    testImplementation("org.jeasy:easy-random-core:4.2.0")
    testImplementation("org.jeasy:easy-random-bean-validation:4.2.0")
    testImplementation("io.zonky.test:embedded-database-spring-test:1.5.5")

    implementation("org.springdoc:springdoc-openapi-ui:1.4.3")
    implementation("org.springdoc:springdoc-openapi-security:1.4.3")
    implementation("org.springdoc:springdoc-openapi-data-rest:1.4.3")

    implementation("org.mapstruct:mapstruct:1.4.1.Final")
    implementation("org.mapstruct:mapstruct-processor:1.4.1.Final")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.4.1.Final")
    testAnnotationProcessor("org.mapstruct:mapstruct-processor:1.4.1.Final")

}

tasks {
    val processTestResourcesTask = withType<ProcessResources> {
        filesMatching("application-test.yaml") {
            expand(project.properties)
        }
    }

    withType<Test> {
        doFirst {
            systemProperty("spring.profiles.active", "test")
        }

        dependsOn(processTestResourcesTask)
        useJUnitPlatform { }
        testLogging {
            events("failed")
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
            showExceptions = true
            showCauses = true
            showStackTraces = true
        }

    }
}

